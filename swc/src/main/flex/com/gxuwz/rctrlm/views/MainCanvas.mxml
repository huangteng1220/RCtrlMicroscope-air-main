<?xml version="1.0"?>
<!--
  Created by xjzx on 2015/7/25.
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:conserverbar="com.gxuwz.rctrlm.views.conServerBar.*"
          xmlns:chat="com.gxuwz.rctrlm.views.chat.*"
          xmlns:aperture="com.gxuwz.rctrlm.utils.fluorinefx.aperture.*"
          xmlns:command="com.gxuwz.rctrlm.views.command.*"
          paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
          creationComplete="creationCompleteHandler()">

    <fx:Script><![CDATA[
        import com.gxuwz.rctrlm.events.CommandEvent;
        import com.gxuwz.rctrlm.events.ConServerBarEvent;
        import com.gxuwz.rctrlm.events.EventDispatcherFactory;
        import com.gxuwz.rctrlm.events.SendPanelEvent;
        import com.gxuwz.rctrlm.views.chat.SendPanel

        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;

        import spark.components.Alert;

        /**
         * 定义变量，进行传值
         */

        [Bindable] private var _netConnection:NetConnection;
        [Bindable] private var _netStream:NetStream;
        [Bindable] private var _msgString:String;
        [Bindable] private var _remoteUser:String;
        [Bindable] private var _lc:LocalObject;
        [Bindable] private var _playoff:Boolean=false;

        /**
         * 监听连接服务状况
         */
        private function creationCompleteHandler():void {
            //连接服务情况。成功则改变状态
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.CHANGE_STATUS_TO_CALL_READY,
                    changeStatusEventHandler);
            //呼叫远程用户过程
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.PLAY_VIDEO_EVENT,
                    callRemoteUserStatusEventHandler);
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.TRY_CALLUSER_EVENT,
                    callUserEventHandler, false, 0, true);
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.TRY_DISCONNECT_SERVER_EVENT,
                    tryDisconnectServerHandler, false, 0, true);
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(CommandEvent.SEND_COMMAND_FROM_EXPERT,
                    sendCommandToLocalHandler);
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.TRY_CANCEL_CALLUSER_EVENT,
                    tryDisconnectServerHandler);
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.TRY_DISCONNECT_REMOTE_USER_EVENT,
                    tryDisconnectServerHandler);
            _lc = lc;//为内部组件传值
        }

        private function changeStatusEventHandler(e:ConServerBarEvent):void {
            //保存_netConnection，和_netStream
            _netConnection = e.netConnection;
            if (_netConnection) {
                csBar.currentState = csBar.callReady;
                //imgVideoCtrl.enabled = true;
            } else {
                trace("nothing have done in main page");
            }
        }

        private function callUserEventHandler(evt:ConServerBarEvent):void {
            trace("try to call remote user:" + evt.remoteUser);
            _remoteUser = evt.remoteUser;
            if(imgVideoCtrl.camera){
                _netConnection.call("callUser", null, evt.remoteUser, evt.action);
                csBar.ringerChooseBool=true;
                csBar.currentState=csBar.callCalling
            }else{
                Alert.show("请先连接显微镜");
                csBar.ringerChooseBool=false;
                csBar.currentState=csBar.callReady;
            }
        }
        private function callRemoteUserStatusEventHandler(e:ConServerBarEvent):void{
            if(e.action=="Accept"){
                csBar.currentState = csBar.callEstablished;
                //发布视频,向ImgVideoCtrl页面设置，
                _playoff=true;
            }else if(e.action=="Reject"){
                Alert.show("对方拒绝接受显微镜连接\n","提示！");
                _playoff=false;
                csBar.currentState=csBar.callFailed;
            }
            csBar.ringerChooseBool=false;
        }
        //断开连接
        private function tryDisconnectServerHandler(e:ConServerBarEvent):void {
            _netConnection.call("callUser", null, _remoteUser, "Disconnect"); //迫使对方下线
            csBar.currentState = csBar.loginNotConnected;
            csBar.ringerChooseBool=false;
           // imgVideoCtrl.enabled = false;
            _playoff=false;
            _netConnection.close();
//            _netConnection = null;
        }
        //正在连接时取消
        private function tryCancleCallUserHandler(e:ConServerBarEvent):void{
            _netConnection.call("callUser", null, _remoteUser, "Reject"); //迫使对方下线
            csBar.currentState = csBar.callReady;
            _playoff=false;
            csBar.ringerChooseBool=false;
            _netConnection.close();
            _netConnection = null;
        }
        //已经连接时取消
        private function tryDisconnectRemoteUserHandler(e:ConServerBarEvent):void{
            _netConnection.call("callUser", null, _remoteUser, "Reject"); //迫使对方下线
            _playoff=false;// 关闭所有流
            csBar.currentState = csBar.callReady;
            csBar.ringerChooseBool=false;
            _netConnection.close();
            _netConnection = null;
        }

        private function sendCommandToLocalHandler(evt:CommandEvent):void {
          trace(evt.action.toString()+"  in MainCanvas");
            _lc.sendMessageFun(evt.action);
        }

        private function onFault(e:FaultEvent):void {
            trace(" result from LocalObject is " + e.fault);
            // Alert.show("onFault");
        }

        private function onOpenComExecute(e:ResultEvent):void {
            trace(" result from openComFun is :" + e.result)
            var msg:String = ObjectUtil.toString(e.result);
           // _lc.sendMessageFun(msg);
        }

        private function onCloseComExecute(e:ResultEvent):void {
            trace(" result from onCloseComFun is :" + e.result)
            // Alert.show("onCloseComExecute");
        }

        private function onSendComExecute(e:ResultEvent):void {
            trace(" result from onSendComFun is :" + e.result)
            //Alert.show("onSendComExecute");
        }

        private function onReadComExecute(e:ResultEvent):void {
            //Alert.show("onReadComFun");
            trace(" result from onSendComFun is :" + e.result)
        }
        private function onOutStringExecute(event:ResultEvent):void {
            var msg:String = ObjectUtil.toString(event.result);
            //Alert.show(msg, "Get OS Version");
            trace("msg:" + msg);
        }
        ]]>
    </fx:Script>
    <!-- 显微镜端-->

    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
        <aperture:LocalObject id="lc" showBusyCursor="false"
                              source="ATLDll:3EFA84FB-67FC-46A5-8C7A-4B58D844EDCC"
                              fault="onFault(event)">
            <aperture:methods>
                <aperture:method name="openComFun" result="onOpenComExecute(event)"/>
                <aperture:method name="closeComFun" result="onCloseComExecute(event)"/>
                <aperture:method name="sendMessageFun" result="onSendComExecute(event)"/>
                <aperture:method name="readMessageFun" result="onReadComExecute(event)"/>
            </aperture:methods>
        </aperture:LocalObject>

    </fx:Declarations>
    <!-- 登录-->
    <conserverbar:ConServerBar id="csBar" width="100%"/>
    <!-- 视频图片区-->
    <command:ImgVideoCtrl id="imgVideoCtrl"
                          width="100%" height="100%"
                          netConnection="{_netConnection}"
                          lc="{lc}"
                          playoff="{_playoff}"
                          remoteUser="{_remoteUser}"/>
    <!--  netStream="{_netStream}"-->
    <!--enabled="false"-->
    <!--<chat:Chat id="chat"-->
               <!--netConnection="{_netConnection}"-->
               <!--remoteUser="{_remoteUser}"-->
               <!--width="100%"/>-->
</s:VGroup>
